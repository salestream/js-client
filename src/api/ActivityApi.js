/**
 * Salestream API
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateEmail', 'model/CreateNote', 'model/CreateSms', 'model/ErrorResponse', 'model/SuccessResponse', 'model/UpdateEmail', 'model/UpdateNote', 'model/UpdateSms'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateEmail'), require('../model/CreateNote'), require('../model/CreateSms'), require('../model/ErrorResponse'), require('../model/SuccessResponse'), require('../model/UpdateEmail'), require('../model/UpdateNote'), require('../model/UpdateSms'));
  } else {
    // Browser globals (root is window)
    if (!root.SalestreamApi) {
      root.SalestreamApi = {};
    }
    root.SalestreamApi.ActivityApi = factory(root.SalestreamApi.ApiClient, root.SalestreamApi.CreateEmail, root.SalestreamApi.CreateNote, root.SalestreamApi.CreateSms, root.SalestreamApi.ErrorResponse, root.SalestreamApi.SuccessResponse, root.SalestreamApi.UpdateEmail, root.SalestreamApi.UpdateNote, root.SalestreamApi.UpdateSms);
  }
}(this, function(ApiClient, CreateEmail, CreateNote, CreateSms, ErrorResponse, SuccessResponse, UpdateEmail, UpdateNote, UpdateSms) {
  'use strict';

  /**
   * Activity service.
   * @module api/ActivityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ActivityApi. 
   * @alias module:api/ActivityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the leadIdActivityEmailEmailIdDelete operation.
     * @callback module:api/ActivityApi~leadIdActivityEmailEmailIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete email
     * @param {String} id lead id
     * @param {String} emailId email id
     * @param {module:api/ActivityApi~leadIdActivityEmailEmailIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityEmailEmailIdDelete = function(id, emailId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityEmailEmailIdDelete");
      }

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling leadIdActivityEmailEmailIdDelete");
      }


      var pathParams = {
        'id': id,
        'emailId': emailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/email/{emailId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityEmailEmailIdPut operation.
     * @callback module:api/ActivityApi~leadIdActivityEmailEmailIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update email
     * @param {String} id lead id
     * @param {String} emailId email id
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateEmail} opts.updateEmail 
     * @param {module:api/ActivityApi~leadIdActivityEmailEmailIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityEmailEmailIdPut = function(id, emailId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateEmail'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityEmailEmailIdPut");
      }

      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling leadIdActivityEmailEmailIdPut");
      }


      var pathParams = {
        'id': id,
        'emailId': emailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/email/{emailId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityEmailPost operation.
     * @callback module:api/ActivityApi~leadIdActivityEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create activity
     * @param {String} id lead id
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateEmail} opts.createEmail 
     * @param {module:api/ActivityApi~leadIdActivityEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityEmailPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['createEmail'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityEmailPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityGet operation.
     * @callback module:api/ActivityApi~leadIdActivityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get lead activity
     * @param {String} id lead id
     * @param {Object} opts Optional parameters
     * @param {String} opts.after after token
     * @param {String} opts.before before token
     * @param {module:api/ActivityApi~leadIdActivityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityNoteNoteIdDelete operation.
     * @callback module:api/ActivityApi~leadIdActivityNoteNoteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete note
     * @param {String} id lead id
     * @param {String} noteId note id
     * @param {module:api/ActivityApi~leadIdActivityNoteNoteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityNoteNoteIdDelete = function(id, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityNoteNoteIdDelete");
      }

      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling leadIdActivityNoteNoteIdDelete");
      }


      var pathParams = {
        'id': id,
        'noteId': noteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/note/{noteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityNoteNoteIdPut operation.
     * @callback module:api/ActivityApi~leadIdActivityNoteNoteIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * udpate note
     * @param {String} id lead id
     * @param {String} noteId note id
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNote} opts.updateNote 
     * @param {module:api/ActivityApi~leadIdActivityNoteNoteIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityNoteNoteIdPut = function(id, noteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNote'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityNoteNoteIdPut");
      }

      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling leadIdActivityNoteNoteIdPut");
      }


      var pathParams = {
        'id': id,
        'noteId': noteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/note/{noteId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivityNotePost operation.
     * @callback module:api/ActivityApi~leadIdActivityNotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create note
     * @param {String} id lead id
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNote} opts.createNote 
     * @param {module:api/ActivityApi~leadIdActivityNotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivityNotePost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['createNote'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivityNotePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/note', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivitySmsPost operation.
     * @callback module:api/ActivityApi~leadIdActivitySmsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create sms
     * @param {String} id lead id
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSms} opts.createSms 
     * @param {module:api/ActivityApi~leadIdActivitySmsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivitySmsPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['createSms'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivitySmsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/sms', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivitySmsSmsIdDelete operation.
     * @callback module:api/ActivityApi~leadIdActivitySmsSmsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete sms
     * @param {String} id lead id
     * @param {String} smsId sms id
     * @param {module:api/ActivityApi~leadIdActivitySmsSmsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivitySmsSmsIdDelete = function(id, smsId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivitySmsSmsIdDelete");
      }

      // verify the required parameter 'smsId' is set
      if (smsId === undefined || smsId === null) {
        throw new Error("Missing the required parameter 'smsId' when calling leadIdActivitySmsSmsIdDelete");
      }


      var pathParams = {
        'id': id,
        'smsId': smsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/sms/{smsId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdActivitySmsSmsIdPut operation.
     * @callback module:api/ActivityApi~leadIdActivitySmsSmsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create sms
     * @param {String} id lead id
     * @param {String} smsId sms id
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSms} opts.updateSms 
     * @param {module:api/ActivityApi~leadIdActivitySmsSmsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdActivitySmsSmsIdPut = function(id, smsId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateSms'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdActivitySmsSmsIdPut");
      }

      // verify the required parameter 'smsId' is set
      if (smsId === undefined || smsId === null) {
        throw new Error("Missing the required parameter 'smsId' when calling leadIdActivitySmsSmsIdPut");
      }


      var pathParams = {
        'id': id,
        'smsId': smsId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/activity/sms/{smsId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
