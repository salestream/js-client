/**
 * Salestream API
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateLeadAddresses', 'model/CreateLeadContacts', 'model/ErrorResponse', 'model/SuccessResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateLeadAddresses'), require('../model/CreateLeadContacts'), require('../model/ErrorResponse'), require('../model/SuccessResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SalestreamApi) {
      root.SalestreamApi = {};
    }
    root.SalestreamApi.LeadApi = factory(root.SalestreamApi.ApiClient, root.SalestreamApi.CreateLeadAddresses, root.SalestreamApi.CreateLeadContacts, root.SalestreamApi.ErrorResponse, root.SalestreamApi.SuccessResponse);
  }
}(this, function(ApiClient, CreateLeadAddresses, CreateLeadContacts, ErrorResponse, SuccessResponse) {
  'use strict';

  /**
   * Lead service.
   * @module api/LeadApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LeadApi. 
   * @alias module:api/LeadApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the leadIdGet operation.
     * @callback module:api/LeadApi~leadIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lead
     * @param {String} id lead id
     * @param {module:api/LeadApi~leadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.leadIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lead/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdPut operation.
     * @callback module:api/LeadApi~leadIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update lead
     * @param {String} id lead id
     * @param {Object} opts Optional parameters
     * @param {String} opts.company 
     * @param {String} opts.url 
     * @param {String} opts.description 
     * @param {Array.<module:model/CreateLeadContacts>} opts.contacts 
     * @param {Array.<module:model/CreateLeadAddresses>} opts.addresses 
     * @param {Object} opts.customFields 
     * @param {String} opts.status 
     * @param {module:api/LeadApi~leadIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company': opts['company'],
        'url': opts['url'],
        'description': opts['description'],
        'contacts': this.apiClient.buildCollectionParam(opts['contacts'], 'csv'),
        'addresses': this.apiClient.buildCollectionParam(opts['addresses'], 'csv'),
        'custom_fields': opts['customFields'],
        'status': opts['status']
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadPost operation.
     * @callback module:api/LeadApi~leadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create lead
     * @param {String} company 
     * @param {Object} opts Optional parameters
     * @param {String} opts.url 
     * @param {String} opts.description 
     * @param {Array.<module:model/CreateLeadContacts>} opts.contacts 
     * @param {Array.<module:model/CreateLeadAddresses>} opts.addresses 
     * @param {Object} opts.customFields 
     * @param {String} opts.status 
     * @param {module:api/LeadApi~leadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadPost = function(company, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'company' is set
      if (company === undefined || company === null) {
        throw new Error("Missing the required parameter 'company' when calling leadPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'company': company,
        'url': opts['url'],
        'description': opts['description'],
        'contacts': this.apiClient.buildCollectionParam(opts['contacts'], 'csv'),
        'addresses': this.apiClient.buildCollectionParam(opts['addresses'], 'csv'),
        'custom_fields': opts['customFields'],
        'status': opts['status']
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSearchPost operation.
     * @callback module:api/LeadApi~leadSearchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for leads
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString 
     * @param {Array.<String>} opts.columns 
     * @param {module:api/LeadApi~leadSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.leadSearchPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'searchString': opts['searchString'],
        'columns': this.apiClient.buildCollectionParam(opts['columns'], 'csv')
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lead/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
