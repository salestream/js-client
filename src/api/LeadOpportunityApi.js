/**
 * Salestream API
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/SuccessResponse', 'model/Text'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/SuccessResponse'), require('../model/Text'));
  } else {
    // Browser globals (root is window)
    if (!root.SalestreamApi) {
      root.SalestreamApi = {};
    }
    root.SalestreamApi.LeadOpportunityApi = factory(root.SalestreamApi.ApiClient, root.SalestreamApi.ErrorResponse, root.SalestreamApi.SuccessResponse, root.SalestreamApi.Text);
  }
}(this, function(ApiClient, ErrorResponse, SuccessResponse, Text) {
  'use strict';

  /**
   * LeadOpportunity service.
   * @module api/LeadOpportunityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LeadOpportunityApi. 
   * @alias module:api/LeadOpportunityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the leadIdOpportunityGet operation.
     * @callback module:api/LeadOpportunityApi~leadIdOpportunityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get lead opportunities
     * @param {String} id lead id
     * @param {module:api/LeadOpportunityApi~leadIdOpportunityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdOpportunityGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdOpportunityGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/opportunity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdOpportunityOpportunityIdDelete operation.
     * @callback module:api/LeadOpportunityApi~leadIdOpportunityOpportunityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update opportunity
     * @param {String} id lead id
     * @param {String} opportunityId opportunity id
     * @param {module:api/LeadOpportunityApi~leadIdOpportunityOpportunityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdOpportunityOpportunityIdDelete = function(id, opportunityId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdOpportunityOpportunityIdDelete");
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId === undefined || opportunityId === null) {
        throw new Error("Missing the required parameter 'opportunityId' when calling leadIdOpportunityOpportunityIdDelete");
      }


      var pathParams = {
        'id': id,
        'opportunityId': opportunityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/opportunity/{opportunityId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdOpportunityOpportunityIdPut operation.
     * @callback module:api/LeadOpportunityApi~leadIdOpportunityOpportunityIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update opportunity
     * @param {String} id lead id
     * @param {String} opportunityId opportunity id
     * @param {Number} value 
     * @param {Number} estCloseDate 
     * @param {String} assignee 
     * @param {Number} confidence 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contact 
     * @param {module:model/Text} opts.comment 
     * @param {module:api/LeadOpportunityApi~leadIdOpportunityOpportunityIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdOpportunityOpportunityIdPut = function(id, opportunityId, value, estCloseDate, assignee, confidence, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdOpportunityOpportunityIdPut");
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId === undefined || opportunityId === null) {
        throw new Error("Missing the required parameter 'opportunityId' when calling leadIdOpportunityOpportunityIdPut");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling leadIdOpportunityOpportunityIdPut");
      }

      // verify the required parameter 'estCloseDate' is set
      if (estCloseDate === undefined || estCloseDate === null) {
        throw new Error("Missing the required parameter 'estCloseDate' when calling leadIdOpportunityOpportunityIdPut");
      }

      // verify the required parameter 'assignee' is set
      if (assignee === undefined || assignee === null) {
        throw new Error("Missing the required parameter 'assignee' when calling leadIdOpportunityOpportunityIdPut");
      }

      // verify the required parameter 'confidence' is set
      if (confidence === undefined || confidence === null) {
        throw new Error("Missing the required parameter 'confidence' when calling leadIdOpportunityOpportunityIdPut");
      }


      var pathParams = {
        'id': id,
        'opportunityId': opportunityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'value': value,
        'est_close_date': estCloseDate,
        'assignee': assignee,
        'confidence': confidence,
        'contact': opts['contact'],
        'comment': opts['comment']
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/opportunity/{opportunityId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leadIdOpportunityPost operation.
     * @callback module:api/LeadOpportunityApi~leadIdOpportunityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create opportunity
     * @param {String} id lead id
     * @param {Number} value 
     * @param {Number} estCloseDate 
     * @param {String} assignee 
     * @param {Number} confidence 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contact 
     * @param {module:model/Text} opts.comment 
     * @param {module:api/LeadOpportunityApi~leadIdOpportunityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    this.leadIdOpportunityPost = function(id, value, estCloseDate, assignee, confidence, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leadIdOpportunityPost");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling leadIdOpportunityPost");
      }

      // verify the required parameter 'estCloseDate' is set
      if (estCloseDate === undefined || estCloseDate === null) {
        throw new Error("Missing the required parameter 'estCloseDate' when calling leadIdOpportunityPost");
      }

      // verify the required parameter 'assignee' is set
      if (assignee === undefined || assignee === null) {
        throw new Error("Missing the required parameter 'assignee' when calling leadIdOpportunityPost");
      }

      // verify the required parameter 'confidence' is set
      if (confidence === undefined || confidence === null) {
        throw new Error("Missing the required parameter 'confidence' when calling leadIdOpportunityPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'value': value,
        'est_close_date': estCloseDate,
        'assignee': assignee,
        'confidence': confidence,
        'contact': opts['contact'],
        'comment': opts['comment']
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/lead/{id}/opportunity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
